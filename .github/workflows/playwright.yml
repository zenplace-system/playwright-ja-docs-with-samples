name: Playwright テスト

on:
  pull_request:
    branches: [main, master, develop]
  # 手動実行用のトリガー
  workflow_dispatch:

# GitHub Tokenに必要な権限を追加
permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.51.1-noble
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Bunのインストール
        run: |
          # Bunのインストール
          npm install -g bun

      - name: 依存関係のインストール
        run: |
          bun install --frozen-lockfile
          # GitHub Actions の Linux 環境では、Linux 用のバイナリが必要です
          bun install @tailwindcss/oxide-linux-x64-gnu
          bun install lightningcss-linux-x64-gnu
          
      - name: Playwright テストの実行
        run: |
          # テスト実行(chrome-headlessのみ)
          bun run test:chrome-headless
        env:
          NODE_OPTIONS: "--max_old_space_size=4096" # メモリ不足でCSSのビルドが失敗する不具合対策
          NODE_ENV: test
          CI: true

      - name: HTMLレポートをアーティファクトとしてアップロード
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_id }}
          path: playwright-report/
          retention-days: 30

      - name: テスト結果をPRコメントとして追加
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              // テスト結果のサマリーを読み込む
              let summary = '';
              if (fs.existsSync('./test-results/.last-run.json')) {
                const results = JSON.parse(fs.readFileSync('./test-results/.last-run.json', 'utf8'));
                
                // 簡単なサマリーを作成
                const total = results.total || 0;
                const passed = results.passed || 0;
                const failed = results.failed || 0;
                const skipped = results.skipped || 0;
                
                summary = `### Playwright テスト結果
                - 合計テスト数: ${total}
                - 成功: ${passed}
                - 失敗: ${failed}
                - スキップ: ${skipped}
                
                テスト詳細は GitHub Actions の "Artifacts" セクションからダウンロードできます。
                `;
              } else {
                summary = '### Playwright テスト完了\nテスト詳細は GitHub Actions の "Artifacts" セクションからダウンロードできます。';
              }
              
              // PRへコメントを追加
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.error('Error creating PR comment:', error);
            }
